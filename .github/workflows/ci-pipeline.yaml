name: Trigger Airflow DAGs

on:
  push:
    branches:
      - main
    paths:
      - 'data_pipeline/**'
      - 'model_training/**'

env:
  COMPOSER_API_URL: ${{ vars.GCP_COMPOSER_WEB_SERVER_URL }}

jobs:
  test:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.10'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          if [ -f requirements.txt ]; then pip install -r requirements.txt; fi

      - name: Run tests
        run: |
          echo "Running tests..."
          pytest
        env:
          PYTHONPATH: ${{ github.workspace }}

  trigger-dags:
    needs: test
    runs-on: ubuntu-latest
    strategy:
      matrix:
        dag_id: [ "banner_dag_pipeline", "pdf_processing_pipeline", "train_data_dag", "train_model_trigger_dag" ]
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Get OAuth Token
        id: get-token
        run: |
          echo "TOKEN=$(gcloud auth print-access-token)" >> $GITHUB_ENV

      - name: Check if files changed for ${{ matrix.dag_id }}
        id: check-changes
        uses: tj-actions/changed-files@v45
        with:
          files: |
            data_pipeline/** # Adjust based on DAG dependencies
          files_ignore: |
            data_pipeline/dags/tests/**

      - name: Trigger DAG
        if: steps.check-changes.outputs.any_changed == 'true'
        run: |
          curl -X POST "$COMPOSER_API_URL/dags/${{ matrix.dag_id }}/dagRuns" \
            -H "Content-Type: application/json" \
            -H "Authorization: Bearer $TOKEN" \
            -d '{
              "conf": {},
              "dag_run_id": "manual__$(date +%Y%m%dT%H%M%S)"
            }'
          echo "Triggered DAG ${{ matrix.dag_id }}"

      - name: Monitor DAG Completion
        if: steps.check-changes.outputs.any_changed == 'true'
        run: |
          ATTEMPTS=0
          MAX_ATTEMPTS=20
          SLEEP_TIME=60

          while [[ $ATTEMPTS -lt $MAX_ATTEMPTS ]]; do
            RESPONSE=$(curl -X GET "$COMPOSER_API_URL/dags/${{ matrix.dag_id }}/dagRuns" \
              -H "Authorization: Bearer $TOKEN")
            STATUS=$(echo $RESPONSE | jq -r '.dag_runs[0].state')

            if [[ "$STATUS" == "success" ]]; then
              echo "DAG ${{ matrix.dag_id }} completed successfully."
              exit 0
            elif [[ "$STATUS" == "failed" ]]; then
              echo "DAG ${{ matrix.dag_id }} failed."
              exit 1
            else
              echo "DAG ${{ matrix.dag_id }} still running. Checking again in $SLEEP_TIME seconds..."
              ((ATTEMPTS++))
              sleep $SLEEP_TIME
            fi
          done

          echo "DAG ${{ matrix.dag_id }} did not complete within the expected time."
          exit 1
